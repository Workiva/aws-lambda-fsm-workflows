# Copyright 2016-2020 Workiva Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import logging
from botocore.exceptions import ClientError
import botocore.vendored.requests.packages.urllib3 as urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
logging.getLogger("botocore.vendored.requests.packages.urllib3").setLevel(logging.WARNING)

PRIMARY_METRICS_SOURCE = None
SECONDARY_METRICS_SOURCE = None

PRIMARY_CACHE_SOURCE = 'arn:partition:elasticache:testing:account:primary_cache_source'
SECONDARY_CACHE_SOURCE = 'arn:partition:elasticache:testing:account:secondary_cache_source'

PRIMARY_STREAM_SOURCE = 'arn:partition:sqs:testing:account:primary_stream_source'
SECONDARY_STREAM_SOURCE = 'arn:partition:kinesis:testing:account:stream/secondary_stream_source'

PRIMARY_CHECKPOINT_SOURCE = 'arn:partition:dynamodb:testing:account:table/secondary_checkpoint_source'
SECONDARY_CHECKPOINT_SOURCE = None

PRIMARY_RETRY_SOURCE = 'arn:partition:sqs:testing:account:primary_retry_source'
SECONDARY_RETRY_SOURCE = 'arn:partition:kinesis:testing:account:stream/secondary_retry_source'

PRIMARY_ENVIRONMENT_SOURCE = 'arn:partition:dynamodb:testing:account:table/primary_environment_source'
SECONDARY_ENVIRONMENT_SOURCE = None

AWS_CHAOS = {
    PRIMARY_STREAM_SOURCE: {ClientError({'Error': {'Code': 404, 'Message': 'AWS Chaos'}}, 'service'): 0.1},
    SECONDARY_STREAM_SOURCE: {ClientError({'Error': {'Code': 404, 'Message': 'AWS Chaos'}}, 'service'): 0.1},
    PRIMARY_RETRY_SOURCE: {ClientError({'Error': {'Code': 404, 'Message': 'AWS Chaos'}}, 'service'): 0.1},
    SECONDARY_RETRY_SOURCE: {ClientError({'Error': {'Code': 404, 'Message': 'AWS Chaos'}}, 'service'): 0.1},
    PRIMARY_CACHE_SOURCE: {0: 0.1, None: 0.1}
}

ELASTICACHE_ENDPOINTS = {
    PRIMARY_CACHE_SOURCE: {
        'CacheClusterId': 'memcached-cluster',
        'Engine': 'memcached',
        'ConfigurationEndpoint': {
            'Address': os.environ.get('AWS_HOSTNAME', 'memcached'),
            'Port': 11211
        }
    },
    SECONDARY_CACHE_SOURCE: {
        'CacheClusterId': 'redis-cluster',
        'Engine': 'redis',
        'CacheNodes': [
            {
                'Endpoint': {
                    'Address': os.environ.get('AWS_HOSTNAME', 'redis'),
                    'Port': 6379
                }
            }
        ]
    }
}

ENDPOINTS = {
    PRIMARY_CHECKPOINT_SOURCE: 'https://%s:4569' % os.environ.get('AWS_HOSTNAME', 'localstack-primary'),
    PRIMARY_ENVIRONMENT_SOURCE: 'https://%s:4569' % os.environ.get('AWS_HOSTNAME', 'localstack-primary'),
    PRIMARY_STREAM_SOURCE: 'https://%s:4576' % os.environ.get('AWS_HOSTNAME', 'localstack-primary'),
    SECONDARY_STREAM_SOURCE: 'https://%s:4568' % os.environ.get('AWS_HOSTNAME', 'localstack-secondary'),
    PRIMARY_RETRY_SOURCE: 'https://%s:4576' % os.environ.get('AWS_HOSTNAME', 'localstack-primary'),
    SECONDARY_RETRY_SOURCE: 'https://%s:4568' % os.environ.get('AWS_HOSTNAME', 'localstack-secondary'),
    'arn:aws:ecs:testing:account:cluster/aws-lambda-fsm': 'http://%s:8888' % os.environ.get('AWS_HOSTNAME', 'devecs')
}

BOTO3_CLIENT_ADDITIONAL_KWARGS = {'use_ssl': True, 'verify': False}
