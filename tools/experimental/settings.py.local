PRIMARY_METRICS_SOURCE = None
SECONDARY_METRICS_SOURCE = None

PRIMARY_CACHE_SOURCE = 'arn:partition:elasticache:testing:account:cluster:aws-lambda-fsm'
SECONDARY_CACHE_SOURCE = 'arn:partition:elasticache:testing:account:cluster:aws-lambda-fsm'

PRIMARY_STREAM_SOURCE = 'arn:partition:kinesis:testing:account:stream/aws-lambda-fsm'
SECONDARY_STREAM_SOURCE = 'arn:partition:kinesis:testing:account:stream/aws-lambda-fsm'

PRIMARY_CHECKPOINT_SOURCE = None
SECONDARY_CHECKPOINT_SOURCE = None

PRIMARY_RETRY_SOURCE = 'arn:partition:kinesis:testing:account:stream/aws-lambda-fsm'
SECONDARY_RETRY_SOURCE = 'arn:partition:kinesis:testing:account:stream/aws-lambda-fsm'

PRIMARY_ENVIRONMENT_SOURCE = 'arn:partition:dynamodb:testing:account:table/aws-lambda-fsm.env'
SECONDARY_ENVIRONMENT_SOURCE = 'arn:partition:dynamodb:testing:account:table/aws-lambda-fsm.env'

AWS_CHAOS = {}
ENDPOINTS = {
     'arn:partition:dynamodb:testing:account:table/aws-lambda-fsm.env': 'http://localhost:4569',
     'arn:partition:kinesis:testing:account:stream/aws-lambda-fsm': 'http://localhost:4568',
     'arn:partition:elasticache:testing:account:cluster:aws-lambda-fsm': 'localhost:11211',
     'arn:aws:ecs:testing:account:cluster/aws-lambda-fsm': 'http://localhost:8888'
}

try:
    import settingslocal
except ImportError:
    settingslocal = None

if settingslocal:
    for setting in dir(settingslocal):
        globals()[setting.upper()] = getattr(settingslocal, setting)
