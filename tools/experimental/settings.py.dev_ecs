import os

PRIMARY_METRICS_SOURCE = None
SECONDARY_METRICS_SOURCE = None

PRIMARY_CACHE_SOURCE = 'arn:partition:elasticache:testing:account:cluster:aws-lambda-fsm'
SECONDARY_CACHE_SOURCE = 'arn:partition:elasticache:testing:account:cluster:aws-lambda-fsm'

PRIMARY_STREAM_SOURCE = 'arn:partition:kinesis:testing:account:stream/aws-lambda-fsm'
SECONDARY_STREAM_SOURCE = 'arn:partition:kinesis:testing:account:stream/aws-lambda-fsm'

PRIMARY_CHECKPOINT_SOURCE = None
SECONDARY_CHECKPOINT_SOURCE = None

PRIMARY_RETRY_SOURCE = 'arn:partition:kinesis:testing:account:stream/aws-lambda-fsm'
SECONDARY_RETRY_SOURCE = 'arn:partition:kinesis:testing:account:stream/aws-lambda-fsm'

PRIMARY_ENVIRONMENT_SOURCE = 'arn:partition:dynamodb:testing:account:table/aws-lambda-fsm.env'
SECONDARY_ENVIRONMENT_SOURCE = None

AWS_CHAOS = {}
ENDPOINTS = {
     'arn:partition:dynamodb:testing:account:table/aws-lambda-fsm.env': 'http://%s:4569' % os.environ.get('DYNAMODB_HOST', 'localstack'),
     'arn:partition:kinesis:testing:account:stream/aws-lambda-fsm': 'http://%s:4568' % os.environ.get('KINESIS_HOST', 'localstack'),
     'arn:partition:elasticache:testing:account:cluster:aws-lambda-fsm': '%s:11211' % os.environ.get('MEMCACHE_HOST', 'memcached'),
     'arn:aws:ecs:testing:account:cluster/aws-lambda-fsm': 'http://%s:8888' % os.environ.get('ECS_HOST', 'ecs')
}

try:
    import settingslocal
except ImportError:
    settingslocal = None

if settingslocal:
    for setting in dir(settingslocal):
        globals()[setting.upper()] = getattr(settingslocal, setting)